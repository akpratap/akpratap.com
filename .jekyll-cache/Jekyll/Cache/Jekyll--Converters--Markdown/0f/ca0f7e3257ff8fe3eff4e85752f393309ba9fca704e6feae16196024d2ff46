I"j<p>In C# 8.0, a new form of “switch” was introduced.  While similar, you’ll find that this new “switch expression” is more concise than it’s “switch statement” counterpart as it does not require all the various keywords (<code class="language-plaintext highlighter-rouge">case</code>, <code class="language-plaintext highlighter-rouge">break</code>, <code class="language-plaintext highlighter-rouge">default</code>, etc.).</p>

<p>Take this, albeit a contrived, example, starting with this enum of car makes in our pretend application:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">enum</span> <span class="n">CarMake</span>
<span class="p">{</span>
    <span class="n">Chevrolet</span><span class="p">,</span>
    <span class="n">Ford</span><span class="p">,</span>
    <span class="n">Dodge</span><span class="p">,</span>
    <span class="n">Tesla</span>
<span class="p">}</span>
</code></pre></div></div>

<p>With that enum, we can create a specific “car manufacturing service”.  Before C# 8.0, that would have looked something like this:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="n">ICarService</span> <span class="nf">CarMakeFactory</span><span class="p">(</span><span class="n">CarMake</span> <span class="n">make</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">switch</span> <span class="p">(</span><span class="n">make</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">case</span> <span class="n">CarMake</span><span class="p">.</span><span class="n">Chevrolet</span><span class="p">:</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">ChevroletService</span><span class="p">();</span>
        <span class="k">case</span> <span class="n">CarMake</span><span class="p">.</span><span class="n">Ford</span><span class="p">:</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">FordService</span><span class="p">();</span>
        <span class="k">case</span> <span class="n">CarMake</span><span class="p">.</span><span class="n">Dodge</span><span class="p">:</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">DodgeService</span><span class="p">();</span>
        <span class="k">case</span> <span class="n">CarMake</span><span class="p">.</span><span class="n">Tesla</span><span class="p">:</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">TeslaService</span><span class="p">();</span>
        <span class="k">default</span><span class="p">:</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="s">"Invalid value for CarMake"</span><span class="p">,</span> <span class="n">paramName</span><span class="p">:</span> <span class="k">nameof</span><span class="p">(</span><span class="n">make</span><span class="p">));</span>    
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In C# 8.0, we can make this a little more concise, and, in my opinion, easier to read:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="n">ICarService</span> <span class="nf">CarMakeFactory</span><span class="p">(</span><span class="n">CarMake</span> <span class="n">make</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">make</span> <span class="k">switch</span>
    <span class="p">{</span>
        <span class="n">CarMake</span><span class="p">.</span><span class="n">Chevrolet</span>   <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">ChevroletService</span><span class="p">(),</span>
        <span class="n">CarMake</span><span class="p">.</span><span class="n">Ford</span>        <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">FordService</span><span class="p">(),</span>
        <span class="n">CarMake</span><span class="p">.</span><span class="n">Dodge</span>       <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">DodgeService</span><span class="p">(),</span>
        <span class="n">CarMake</span><span class="p">.</span><span class="n">Tesla</span>       <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">TeslaService</span><span class="p">(),</span>
        <span class="n">_</span>                   <span class="p">=&gt;</span> <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="s">"Invalid value for CarMake"</span><span class="p">,</span> <span class="n">paramName</span><span class="p">:</span> <span class="k">nameof</span><span class="p">(</span><span class="n">make</span><span class="p">))</span>
    <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This new expression has a few syntax improvements, such as:</p>

<ol>
  <li>The variable comes BEFORE the <code class="language-plaintext highlighter-rouge">switch</code> keyword.  This is a sure sign you’re looking at an expression, instead of the statement.</li>
  <li>The <code class="language-plaintext highlighter-rouge">case</code> and <code class="language-plaintext highlighter-rouge">:</code> are gone, in favor of <code class="language-plaintext highlighter-rouge">=&gt;</code>, which is more intuitive.</li>
  <li>The discard variable, <code class="language-plaintext highlighter-rouge">_</code>, replaces the <code class="language-plaintext highlighter-rouge">default</code> case we’re used to seeing.</li>
  <li>Finally, the bodies are expressions themselves, instead of statements.</li>
</ol>

<p>Let me know what you think about this new (and improved!) way of writing switch <del>stateme</del>…expressions in the comments!</p>

<hr />

<blockquote>
  <p>This post, “C# 8.0 - Switch Expressions”, first appeared at <a href="https://www.codingwithcalvin.net/c-8-switch-expressions">https://www.codingwithcalvin.net/c-8-switch-expressions</a></p>
</blockquote>
:ET